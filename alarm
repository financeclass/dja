# coding:utf8
import time
import os
import datetime
import pandas as pd
import numpy as np
import traceback 
import urllib2
import urllib
import pymysql.cursors


def sendhi(filename):
	with open(filename,'r') as file:
		content=file.read()
	data = {}
	data['msg'] = content
	data['to_group'] = '1501608'
	data['instance'] = 'yixiu_robot_03'
	url = 'http://yixiu.baidu.com:5656/talk'
	post_data = urllib.urlencode(data)
	req = urllib2.urlopen(url, post_data)
	# content = req.read()
	return 0


def rule(s):
    ss=(abs(s[-1]-np.median(s))-np.median(np.abs(np.median(s)-s))*1
       )/np.median(np.abs(np.median(s)-s))
    return ss

def send(df,nroll=7,thres=3):
	alertall=[]
	for aa in df.columns:
		diffline=df[aa].rolling(nroll).apply(rule)
		if diffline.iloc[-1] > thres:
			alertall.append(aa)
	return alertall

def logerror(title='title'):
	traceback.print_exc()
	with open('error.txt','a') as file:
		file.write('----------'+str(datetime.datetime.now())+'\t'+title+'\n'+str(traceback.format_exc())+'\n')

def get_mysql(sql,paras):
	connection = pymysql.connect(**config_baosun)
	with connection.cursor() as cursor:
		cursor.execute(sql,paras)
		result = cursor.fetchall()
		connection.commit()
	connection.close()
	return result

# origin = sys.stdout
# f = open('mail.txt', 'w')
# sys.stdout = f
# print(pd.DataFrame({str(aa[1]):df[aa],'score':diffline}))
# f.close()
# sys.stdout = origin


# unix_timestamp('2016060112233','yyyyMMddHHmmss')

# nohup python mysqltime.py >nohuplog 2>&1 &

testsql='''hive -e "use risk;set hive.cli.print.header=true;
    select year('2011-12-08 10:03:01'),unix_timestamp('2016060112233','yyyyMMddHHmmss'),
    unix_timestamp('20160601','yyyyMMdd')-unix_timestamp('20160602','yyyyMMdd'),
    datediff(from_unixtime(unix_timestamp('20160601','yyyyMMdd'),'yyyy-MM-dd')
    ,from_unixtime(unix_timestamp('20160603','yyyyMMdd'),'yyyy-MM-dd'))
	from rcs_event 
	where dt = '20160920' 
    limit 44
	"        '''



abcheck='''hive -e "use risk;set hive.cli.print.header=true;
	select dt ,
	avg(get_json_object(event_json,'$.commonPlace')) avgcommonplace,
	avg(case when get_json_object(event_json,'$.commonPlace') is null then 1 else 0 end) nullcommonplace,
	avg(get_json_object(event_json,'$.isNormal')) avgisnormal,
	avg(case when get_json_object(event_json,'$.isNormal') is null then 1 else 0 end) nullisnormal
	from rcs_event 
	where dt >= '20161001' 
	and   get_json_object(event_json,'$.eventType') in ('sync_pay', 'sync_verify', 'create_order') 
	group by dt 
	order by dt
	limit 30
	" >>abcheck.csv  '''


xinyong='''hive -e "use risk;set hive.cli.print.header=true;
SELECT  dt,tube,
"sum"(case when succ=1 then payamount else null end) crepay_succ_sum,
"avg"(succ) crepay_succ_rate,
"avg"(case when succ=1 then payamount else null end) crepay_succ_amount_avg
from 
(
SELECT get_json_object(event_json,'$.transId'),
max(case when get_json_object(event_json,'$.spId') ='1501000004' then 'nuomi'
when get_json_object(event_json,'$.shopBizType')='map_hotel' then 'hotel'
else 'other' end) tube,
"max"(dt)dt,
max(get_json_object(event_json,'$.payAmount'))payamount,
max(case when get_json_object(event_json,'$.state')=2 then 1 else 0 end) succ
from rcs_event
where dt>'20161001' 
and substring(get_json_object(event_json,'$.occurTime'),9,4)<'%s'
and  get_json_object(event_json,'$.payType')='credit_pay'
and (get_json_object(event_json,'$.spId') ='1501000004' or 
	get_json_object(event_json,'$.shopBizType')='map_hotel')
group by get_json_object(event_json,'$.transId')
)tt
group by dt,tube
" >>tempxinyong.csv                  
'''
sqlbs = '''SELECT substring(create_time,1,10) time,
        sum(pay_amount+0.0) sum
        FROM mg_worksheet_trans 
        where create_time>%s 
        and substring(create_time,12,5) <%s
        group by 1
      '''
sqlbs_detail = '''
        SELECT create_time,event_occurtime,goods_name,pay_amount,trans_id
        FROM mg_worksheet_trans 
        where create_time>%s 
        order by pay_amount desc
        limit 5;
      '''
config_baosun = {
          'host':'10.94.65.25',
          'port':8900,
          'user':'risk',
          'password':'MhxzKhl',
          'db':'rcs_mgmt',
          'charset':'utf8',
          'cursorclass':pymysql.cursors.DictCursor,
          }

change_dict={'rule,':'\nTOP规则分布：','rim_dt,':'异常场景：','2016':'',
'01-huankuan':'还款','02-tixian':'提现','03-chongzhi':'充值',
'04-zhuanzhang':'转账','05-nuomi':'糯米','06-waimai':'外卖',
'07-uber':'优步','08-licai':'理财','09-xuni':'虚拟',
'10-map':'地图','12-others':'其他'}
mailsh='''
mutt -e "set charset=utf-8" %s -s "%s" -a %s < %s
'''
# os.system(mailsh%('duhaochen@baidu.com','log','nohuplog','nohuplog'))

with open('newdisturb-hive.sql','r') as file:
	content=file.read().replace('%','%%').replace('percs','%s').replace('stime','%s')

timecount=1




while 1:  

	print(datetime.datetime.now())

	# try:
	# 	os.system('rm abcheck.csv')
	# 	os.system(abcheck)
	# 	os.system(mailsh%('duhaochen@baidu.com','abcheck','abcheck.csv','abcheck.csv'))
	# 	raw=pd.read_csv('abcheck.csv',sep='\t',encoding='utf8')
	# 	print(raw)
	# except Exception as e: 
	# 	logerror()
	# finally:
	#     time.sleep(60)

	
	# try:
	# 	raw=pd.DataFrame(get_mysql(sqlbs,(datetime.datetime.now()+datetime.timedelta(days = -30),
	#         	str(datetime.datetime.now())[11:16])))
	# 	raw['sum']=raw['sum'].astype(float)
	# 	raw=pd.pivot_table(raw,index=['time'])
	# 	abnorm=send(raw,thres=3)
	# 	if len(abnorm)>0 and datetime.datetime.now().hour>=9 and datetime.datetime.now().hour<=17:
	# 		detail=pd.DataFrame(get_mysql(sqlbs_detail,(datetime.datetime.now().date())))
	# 		print(detail)
	# 		with open('baosun_detail.csv','w') as file:
	# 			file.write('-----报损报警----'+'\n')
	# 		raw[-4:].to_csv('baosun_detail.csv',encoding='utf8',mode='a')
	# 		detail.to_csv('baosun_detail.csv',encoding='utf8',index=False,mode='a')
	# 		sendhi('baosun_detail.csv')
	# except Exception as e: 
	# 	logerror()
	# finally:
	#     time.sleep(60)


	try:
		print('grouptype start!')
		with open('tempgrouptype.sql','w') as file:
			file.write(content % (
				datetime.datetime.strftime(datetime.datetime.now(),'%H%M%S')))
		os.system('rm tempgrouptype.csv')
		os.system('hive -f tempgrouptype.sql >> tempgrouptype.csv')
		raw=pd.read_csv('tempgrouptype.csv',sep='\t',encoding='utf8')
		raw['rule']=raw['rule'].fillna(u'通过')
		tubesum=pd.pivot_table(raw,index=['rim_dt'],columns=['grouptype'],values=['total_numerator'],aggfunc=np.sum)['total_numerator']
		tubesum_fraction=pd.pivot_table(raw,index=['rim_dt'],columns=['grouptype'],values=['total_fractions'],aggfunc=np.sum)['total_fractions']
		for aaa in tubesum_fraction:
			if tubesum_fraction[aaa].iloc(len(tubesum_fraction)-1)<30:
				del tubesum_fraction[aaa]
			else:
				tubesum_fraction[aaa]=tubesum_fraction[aaa]/tubesum[aaa]#tubesum[('total_numerator',aaa[1])]
				tubesum_fraction[aaa]=tubesum_fraction[aaa].fillna(0)*100
		checkres=send(tubesum_fraction,nroll=14,thres=3)
		if len(checkres)>0:
			os.system('rm tempgrouptype_pd.csv')
			for aaa in checkres:
				rule_sum=pd.pivot_table(raw[raw['grouptype']==aaa],index=['rim_dt'],columns=['rule'],values=['total_numerator'],aggfunc=np.sum)['total_numerator']
				rule_day=rule_sum.T.sum()
				for bbb in rule_sum:
					rule_sum[bbb]=rule_sum[bbb]/rule_day*100
				rule_sum=rule_sum.T
				rule_sum=rule_sum.sort_values(rule_sum.columns[-1],ascending=[False])
				with open('tempgrouptype_pd.csv','a') as file:
					file.write('-----打扰率报警----'+'\n')
				tubesum_fraction[[aaa]][-5:].to_csv('tempgrouptype_pd.csv',mode='a',encoding='utf8',float_format='%.2f')
				rule_sum[rule_sum.columns[-5:]][:5].to_csv('tempgrouptype_pd.csv',mode='a',encoding='utf8',float_format='%.2f')
			with open('tempgrouptype_pd.csv','r') as file:
				cc=file.read()
			for aaa in change_dict:
				cc=cc.replace(str(aaa),change_dict[aaa])
			with open('tempgrouptype_pd.csv','w') as file:
				file.write(cc)
			if datetime.datetime.now().hour>=8 and datetime.datetime.now().hour<=22:
			    sendhi('tempgrouptype_pd.csv')
		print('grouptype scuuess!')
	except Exception as e:
		logerror('group')
	finally:
		print('group end')
		time.sleep(60)



	try:
		print('xinyong start')
		os.system('rm tempxinyong.csv')
		os.system(xinyong % datetime.datetime.strftime(datetime.datetime.now(),'%H%M%S'))
		raw=pd.read_csv('tempxinyong.csv',sep='\t',encoding='utf8')
		raw.to_csv('tempxinyong_pd.csv',encoding='utf8',float_format='%.2f')
		os.system(mailsh%('duhaochen@baidu.com,yangmengbo@baidu.com,songwenfang@baidu.com,jiwenchao01@baidu.com','信用监控','tempxinyong_pd.csv','tempxinyong_pd.csv'))
		print('xinyong success')
	except Exception as e:
		logerror('xinyong')
	finally:
		print('xinyong end')
		time.sleep(60)





